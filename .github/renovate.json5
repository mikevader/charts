{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'local>mikevader/renovate-config',
  ],
  prConcurrentLimit: 5,
  'helm-values': {
    enabled: true,
  },
  helmv3: {
    managerFilePatterns: [
      '/charts/.+/Chart\\.yaml$/',
    ],
  },
  customManagers: [
    {
      customType: 'regex',
      datasourceTemplate: 'docker',
      managerFilePatterns: [
        '/charts/.+/Chart\\.yaml$/',
      ],
      matchStrings: [
        '# renovate: image=(?<depName>.*?)(?: versioning=(?<versioning>.*?))?\\s?appVersion:\\s?\\"?(?<currentValue>[\\w+\\.\\-]*?)\\"?\\s',
      ],
      versioningTemplate: '{{#if versioning}}{{{versioning}}}{{else}}docker{{/if}}'
    },
  ],
  packageRules: [
    {
      matchDatasources: [
        'helm',
      ],
      commitMessageTopic: 'Helm chart {{depName}}',
      separateMinorPatch: true,
    },
    {
      matchDatasources: [
        'github-tags',
      ],
      matchPackageNames: [
        'potiuk/get-workflow-origin',
      ],
      versioning: 'regex:^v(?<major>\\d+)_(?<minor>\\d+)(_(?<patch>\\d+))?$',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      automerge: true,
      automergeType: 'pr',
      matchUpdateTypes: [
        'minor',
        'patch',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      automerge: true,
      automergeType: 'pr',
      matchUpdateTypes: [
        'minor',
        'patch',
      ],
      matchPackageNames: [
        '/felddy/foundryvtt/',
        '/^ghcr.io/mikevader/.*/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      commitMessagePrefix: '[{{{parentDir}}}]',
      branchTopic: '{{{parentDir}}}-{{{depNameSanitized}}}-{{{newMajor}}}{{#if isPatch}}.{{{newMinor}}}{{/if}}.x{{#if isLockfileUpdate}}-lockfile{{/if}}',
      matchUpdateTypes: [
        'major',
      ],
      bumpVersion: 'major',
      labels: [
        'type/major',
      ],
      postUpgradeTasks: {
        commands: [
          "sed -i \"s/^version:.*/version: $(grep '^version:' {{{packageFileDir}}}/Chart.yaml | awk '{print $2}' | awk -F '[.\"]' '{$NF = $NF + 1;} 1' | sed 's/ /./g')/\" {{{packageFileDir}}}/Chart.yaml",
        ],
        fileFilters: [
          '**/Chart.yaml',
        ],
        executionMode: 'branch',
      },
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      bumpVersion: 'minor',
      labels: [
        'type/minor',
      ],
      postUpgradeTasks: {
        commands: [
          "sed -i \"s/^version:.*/version: $(grep '^version:' {{{packageFileDir}}}/Chart.yaml | awk '{print $2}' | awk -F '[.\"]' '{$NF = $NF + 1;} 1' | sed 's/ /./g')/\" {{{packageFileDir}}}/Chart.yaml",
        ],
        fileFilters: [
          '**/Chart.yaml',
        ],
        executionMode: 'branch',
      },
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      bumpVersion: 'patch',
      labels: [
        'type/patch',
      ],
      postUpgradeTasks: {
        commands: [
          "sed -i \"s/^version:.*/version: $(grep '^version:' {{{packageFileDir}}}/Chart.yaml | awk '{print $2}' | awk -F '[.\"]' '{$NF = $NF + 1;} 1' | sed 's/ /./g')/\" {{{packageFileDir}}}/Chart.yaml",
        ],
        fileFilters: [
          '**/Chart.yaml',
        ],
        executionMode: 'branch',
      },
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'loose',
      matchPackageNames: [
        '/^ghcr.io/k8s-at-home/.*/',
        '/^ghcr.io/mikevader/.*/',
        '/bitnami/external-dns/',
        '/fireflyiii/.*/',
        '/linuxserver/heimdall/',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      commitMessagePrefix: '[{{{parentDir}}}]',
      branchTopic: '{{{parentDir}}}-{{{depNameSanitized}}}-{{{newMajor}}}{{#if isPatch}}.{{{newMinor}}}{{/if}}.x{{#if isLockfileUpdate}}-lockfile{{/if}}',
      matchUpdateTypes: [
        'major',
      ],
      bumpVersion: 'major',
      labels: [
        'type/major',
      ],
      matchPackageNames: [
        'common',
      ],
      groupName: 'common library major',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      bumpVersion: 'minor',
      labels: [
        'type/minor',
      ],
      matchPackageNames: [
        'common',
      ],
      groupName: 'common library minor',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      bumpVersion: 'patch',
      labels: [
        'type/patch',
      ],
      matchPackageNames: [
        'common',
      ],
      groupName: 'common library patch',
    },
    {
      matchDatasources: [
        'helm',
      ],
      commitMessagePrefix: '[{{{parentDir}}}]',
      branchTopic: '{{{parentDir}}}-{{{depNameSanitized}}}-{{{newMajor}}}{{#if isPatch}}.{{{newMinor}}}{{/if}}.x{{#if isLockfileUpdate}}-lockfile{{/if}}',
      matchUpdateTypes: [
        'major',
      ],
      bumpVersion: 'major',
      labels: [
        'type/major',
      ],
      matchPackageNames: [
        '!common',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      bumpVersion: 'minor',
      labels: [
        'type/minor',
      ],
      groupName: 'external dependency minor',
      matchPackageNames: [
        '!common',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      bumpVersion: 'patch',
      labels: [
        'type/patch',
      ],
      groupName: 'external dependency patch',
      matchPackageNames: [
        '!common',
      ],
    },
  ],
}
